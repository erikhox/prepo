name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

permissions:
  contents: read

env:
  FORCE_COLOR: 1

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -e ".[dev,performance,all]"
      
      - name: Lint with flake8
        run: |
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check code formatting with black
        run: black --check --diff src tests
      
      - name: Check import sorting with isort
        run: isort --check-only --diff src tests
      
      - name: Type check with mypy
        run: mypy src/prepo --ignore-missing-imports
        continue-on-error: true
      
      - name: Test with pytest
        run: |
          pytest tests/ --cov=src/prepo --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=85
        env:
          PYTEST_ADDOPTS: "--maxfail=5 --tb=short"
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
      
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[all]"
      
      - name: Create test data
        run: |
          python -c "
          import pandas as pd
          import numpy as np
          
          np.random.seed(42)
          n_rows = 100
          
          df = pd.DataFrame({
              'numeric_col': np.random.normal(50, 15, n_rows),
              'price_USD': np.random.uniform(10, 1000, n_rows),
              'percentage': np.random.uniform(0, 1, n_rows),
              'category': np.random.choice(['A', 'B', 'C', 'D'], n_rows),
              'binary_col': np.random.choice([True, False], n_rows),
              'id_column': range(1001, 1001 + n_rows),
          })
          
          df.loc[::10, 'numeric_col'] = np.nan
          df.loc[::15, 'price_USD'] = np.nan
          
          df.to_csv('test_input.csv', index=False)
          df.to_json('test_input.json', orient='records')
          print(f'Created test data with {len(df)} rows')
          "
      
      - name: Test CLI functionality
        run: |
          prepo test_input.csv test_output.csv --info
          prepo test_input.csv test_output.json --scaler robust --keep-na
          prepo test_input.json test_output_from_json.csv --scaler minmax
          ls -la test_output*

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build setuptools wheel twine
      
      - name: Build package distributions
        run: |
          python -m build
      
      - name: Check package integrity
        run: |
          python -m twine check dist/*
      
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write
    
    environment:
      name: pypi
      url: https://pypi.org/project/prepo/
    
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
